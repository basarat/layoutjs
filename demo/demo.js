var layout = require("../layout");
var extend = layout.extend;
var tall = { height: '150px' };
var tallVertical = extend(layout.vertical, { height: '250px' });
var tallHorizontal = extend(layout.horizontal, tall);
var narrowHorizontal = extend(layout.horizontal, { width: '220px' });
var content = React.createElement("div", null, React.createElement("h1", null, "Pure Layout. Nothing more. Nothing less."), React.createElement("div", null, React.createElement("a", {"href": "https://github.com/basarat/layoutjs/blob/gh-pages/demo/demo.jsx"}, "Source")), React.createElement("div", null, React.createElement("a", {"href": "http://plnkr.co/edit/T3N3xXk86ZHCD1iXNcJj?p=preview"}, "Plnkr")), React.createElement("h2", null, "Entice", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "entice"})), React.createElement("p", null, "Use the ", React.createElement("code", null, "centerCenter"), "style to center Center"), React.createElement("div", {"className": "demo", "style": extend(layout.centerCenter, tall)}, React.createElement("div", null, "Look ma. Center Center and no table.")), React.createElement("h2", {"id": "horizontal-and-vertical-layout"}, "Horizontal and vertical layout", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "horizontal-and-vertical-layout"})), React.createElement("p", null, "When a container includes the ", React.createElement("code", null, "horizontal"), "or ", React.createElement("code", null, "vertical"), "style, it can become a flex container with the specified orientation"), React.createElement("div", {"className": "demo", "style": layout.horizontal}, React.createElement("div", null, "One"), React.createElement("div", null, "Two"), React.createElement("div", null, "Three")), React.createElement("h3", {"id": "flexible-children", "class": "has-permalink"}, "Flexible children", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "flexible-children"})), React.createElement("p", null, "Children of an element using the ", React.createElement("code", null, "layout"), "styles can use ", React.createElement("code", null, "flex"), "style to control their own sizing. For example:"), React.createElement("div", {"className": "demo", "style": layout.horizontal}, React.createElement("div", null, "Alpha"), React.createElement("div", {"style": layout.flex}, "Beta (flex)"), React.createElement("div", null, "Gamma")), React.createElement("p", null, "The same is true for children of ", React.createElement("code", null, "vertical"), "elements:"), React.createElement("p", null, React.createElement("strong", null, "Note"), ": for vertical layouts, the container needs to have a height for the children to flex correctly."), React.createElement("div", {"className": "demo", "style": tallVertical}, React.createElement("div", null, "Alpha"), React.createElement("div", {"style": layout.flex}, "Beta (flex)"), React.createElement("div", null, "Gamma")), React.createElement("p", null, "Children elements can be told to take up more space by including a “flex ratio” with the ", React.createElement("code", null, "flex"), "style. A flex ratio is specified with a number: ", React.createElement("em", null, "1"), ", ", React.createElement("em", null, "2"), ", ", React.createElement("em", null, "3"), ", currently up to ", React.createElement("em", null, "12"), "."), React.createElement("p", null, "For example, to make “Gamma” 2x larger than “Beta” and “Alpha” 3x larger, use ", React.createElement("code", null, "flex2"), "and ", React.createElement("code", null, "flex3"), ", respectively:"), React.createElement("div", {"className": "demo", "style": layout.horizontal}, React.createElement("div", {"style": layout.flex3}, "Alpha"), React.createElement("div", {"style": layout.flex}, "Beta"), React.createElement("div", {"style": layout.flex2}, "Gamma")), React.createElement("h3", {"id": "cross-axis-alignment", "class": "has-permalink"}, "Cross-axis alignment", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "cross-axis-alignment"})), React.createElement("p", null, "By default, children stretch to fit the cross-axis (e.g. ", React.createElement("em", null, "vertical"), "stretching in a ", React.createElement("em", null, "horizontal"), "layout)."), React.createElement("div", {"className": "demo", "style": tallHorizontal}, React.createElement("div", null, "Stretch Fill")), React.createElement("p", null, "Position ", React.createElement("em", null, "across"), "the main axis (e.g. ", React.createElement("em", null, "vertically"), "in a ", React.createElement("em", null, "horizontal"), "layout) by adding ", React.createElement("code", null, "center"), "or ", React.createElement("code", null, "start"), "or ", React.createElement("code", null, "end"), "."), React.createElement("div", {"className": "demo", "style": layout.extend(tallHorizontal, layout.center)}, React.createElement("div", null, "Center")), React.createElement("div", {"className": "demo", "style": layout.extend(tallHorizontal, layout.start)}, React.createElement("div", null, "start")), React.createElement("div", {"className": "demo", "style": layout.extend(tallHorizontal, layout.end)}, React.createElement("div", null, "end")), React.createElement("h2", {"id": "justification", "class": "has-permalink"}, "Justification", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "justification"})), React.createElement("p", null, "Justification controls the content position in the ", React.createElement("em", null, "main"), "axis. Use ", React.createElement("code", null, "startJustified"), "or ", React.createElement("code", null, "centerJustified"), "or ", React.createElement("code", null, "endJustified"), "or ", React.createElement("code", null, "aroundJustified"), "or ", React.createElement("code", null, "betweenJustified"), "."), React.createElement("div", {"className": "demo", "style": layout.extend(layout.horizontal, layout.startJustified)}, React.createElement("div", null, "start-justified"), React.createElement("div", null, "start-justified"), React.createElement("div", null, "start-justified")), React.createElement("div", {"className": "demo", "style": layout.extend(layout.horizontal, layout.centerJustified)}, React.createElement("div", null, "center-justified"), React.createElement("div", null, "center-justified"), React.createElement("div", null, "center-justified")), React.createElement("div", {"className": "demo", "style": layout.extend(layout.horizontal, layout.endJustified)}, React.createElement("div", null, "end-justified"), React.createElement("div", null, "end-justified"), React.createElement("div", null, "end-justified")), React.createElement("div", {"className": "demo", "style": layout.extend(layout.horizontal, layout.aroundJustified)}, React.createElement("div", null, "around-justified"), React.createElement("div", null, "around-justified"), React.createElement("div", null, "around-justified")), React.createElement("div", {"className": "demo", "style": layout.extend(layout.horizontal, layout.betweenJustified)}, React.createElement("div", null, "between-justified"), React.createElement("div", null, "between-justified"), React.createElement("div", null, "between-justified")), React.createElement("h2", {"id": "self-alignment", "class": "has-permalink"}, "Self alignment", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "self-alignment"})), "Alignment can also be set per-child (instead of using the layout containers rules):", React.createElement("div", {"className": "demo", "style": tallHorizontal}, React.createElement("div", {"style": layout.selfStart}, "selfStart"), React.createElement("div", {"style": layout.selfCenter}, "selfCenter"), React.createElement("div", {"style": layout.selfEnd}, "selfEnd"), React.createElement("div", {"style": layout.selfStretch}, "selfStretch"), React.createElement("div", null, "Default is stretch")), React.createElement("h2", {"id": "wrapping", "class": "has-permalink"}, "Wrapping", React.createElement("a", {"class": "permalink", "title": "Permalink", "href": "wrapping"})), React.createElement("p", null, "Wrapped layouts can be enabled with the ", React.createElement("code", null, "wrap"), "style."), React.createElement("div", {"className": "demo", "style": layout.extend(narrowHorizontal, layout.wrap)}, React.createElement("div", null, "Alpha"), React.createElement("div", null, "Beta"), React.createElement("div", null, "Gamma"), React.createElement("div", null, "Delta")));
var Demo = React.createClass({
    render: function () {
        return content;
    }
});
React.render(React.createElement(Demo, null), document.getElementById('container'));
